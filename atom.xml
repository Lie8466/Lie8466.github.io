<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yawei Li</title>
  
  <subtitle>knowing something of everything and everything of something</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-21T09:52:45.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yawei Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅析&quot;对arguments对象使用Array.prototype.slice()可以将其转化为数组&quot;</title>
    <link href="http://yoursite.com/2017/arguments-slice/"/>
    <id>http://yoursite.com/2017/arguments-slice/</id>
    <published>2017-11-21T03:34:05.000Z</published>
    <updated>2017-11-21T09:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>《Javascript高级程序设计(第3版)》的250页有一句话叫“对arguments对象使用Array.prototype.slice()可以将其转化为数组”，为什么这么说？</p><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>Js中的每一个函数(箭头函数除外)自动获得两个变量this和arguments。因此随便定义一个非箭头函数，可以打印出它的auguments;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; function add (a, b) &#123; return arguments;&#125;</span><br><span class="line">&gt; var arg = add (1, 2);</span><br><span class="line">&gt; arg  // 打印arg</span><br></pre></td></tr></table></figure><p>打印结果<br><img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdc92725301f34?w=796&amp;h=348&amp;f=png&amp;s=52299" alt=""></p><p>arg并不是一个数组，但是可以通过arg[0],arg[1]及arg.length来获取参数的一些属性。可以通过Array.prototype.slice()来将其转化为一个数组</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdc993c8e020d5?w=882&amp;h=578&amp;f=png&amp;s=85993" alt=""></p><p>上图中可以看出以下两点：</p><p>1.Array.prototype.slice()返回一个新数组<br>2.Array.prototype.slice()并不会影响其参数</p><h2 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a>Array.prototype.slice()</h2><p>Array.prototype.slice是怎么实现返回一个新数组的呢？网上也有一些通过看源码来解析其原理的文章，例如 <a href="http://www.cnblogs.com/henryli/p/3700945.html" target="_blank" rel="noopener">http://www.cnblogs.com/henryli/p/3700945.html</a> ，但是作为一个前端这个理解起来有一定的困难，我的建议是查看loadash对slice的实现来理解一下其原理。<br>文档:<a href="http://lodash.think2011.net/slice" target="_blank" rel="noopener">http://lodash.think2011.net/slice</a><br>源码：<a href="https://github.com/lodash/lodash/blob/master/slice.js" target="_blank" rel="noopener">https://github.com/lodash/lodash/blob/master/slice.js</a></p><p>_.slice(array, [start=0], [end=array.length])<br>创建一个裁剪后的数组，从 start 到 end 的位置，但不包括 end 本身的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Creates a slice of `array` from `start` up to, but not including, `end`.</span><br><span class="line"> *</span><br><span class="line"> * **Note:** This method is used instead of</span><br><span class="line"> * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are</span><br><span class="line"> * returned.</span><br><span class="line"> *</span><br><span class="line"> * @since 3.0.0</span><br><span class="line"> * @category Array</span><br><span class="line"> * @param &#123;Array&#125; array The array to slice.</span><br><span class="line"> * @param &#123;number&#125; [start=0] The start position.</span><br><span class="line"> * @param &#123;number&#125; [end=array.length] The end position.</span><br><span class="line"> * @returns &#123;Array&#125; Returns the slice of `array`.</span><br><span class="line"> */</span><br><span class="line">function slice(array, start, end) &#123;</span><br><span class="line">  let length = array == null ? 0 : array.length</span><br><span class="line">  if (!length) &#123;</span><br><span class="line">    return []</span><br><span class="line">  &#125;</span><br><span class="line">  start = start == null ? 0 : start</span><br><span class="line">  end = end === undefined ? length : end</span><br><span class="line"></span><br><span class="line">  if (start &lt; 0) &#123;</span><br><span class="line">    start = -start &gt; length ? 0 : (length + start)</span><br><span class="line">  &#125;</span><br><span class="line">  end = end &gt; length ? length : end</span><br><span class="line">  if (end &lt; 0) &#123;</span><br><span class="line">    end += length</span><br><span class="line">  &#125;</span><br><span class="line">  length = start &gt; end ? 0 : ((end - start) &gt;&gt;&gt; 0)</span><br><span class="line">  start &gt;&gt;&gt;= 0</span><br><span class="line"></span><br><span class="line">  let index = -1</span><br><span class="line">  const result = new Array(length)</span><br><span class="line">  while (++index &lt; length) &#123;</span><br><span class="line">    result[index] = array[index + start]</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此当我们使用Array.prototype.slice.call(arg, 0)时，实际上返回了一个新的数组result,该数组的长度等于arg.length，其元素包含从0到arg.length的所有元素，即arg[0],arg[1]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;《Javascript高级程序设计(第3版)》的250页有一句话叫“对arguments对象使用Array.prototype.slice(
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Charles使用指南</title>
    <link href="http://yoursite.com/2017/how-charles/"/>
    <id>http://yoursite.com/2017/how-charles/</id>
    <published>2017-11-10T11:42:37.000Z</published>
    <updated>2017-11-21T09:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Charles使用指南"><a href="#Charles使用指南" class="headerlink" title="Charles使用指南"></a>Charles使用指南</h3><p>环境： Mac<br>Charles版本：v4.1.3</p><p>charles是Mac上很好用的抓包工具。在需要跨页面的查看所有请求时，Chrome的network已经不能满足这个要求，此时使用charles再好不过了。另外还可以使用charles更改请求和返回数据、使请求打到不同的环境等。下面介绍几个常用的技巧。</p><h4 id="Recording-settings"><a href="#Recording-settings" class="headerlink" title="Recording settings"></a>Recording settings</h4><p>打开Proxy-&gt;Recording Settings，有以下三个选项</p><p>1.options</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE91a698175012928073c4f5ae3685fc67/973" alt=""></p><p>Max Requests: 限制当前存储的最多请求数，超过这个数字的日期较早的请求将会被自动清除掉。再也不用手动点清除按钮了</p><p>2.Include</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE0af1bfea9e344a793c93034eaa99d859/977" alt=""></p><p>太多的请求眼花缭乱，看不到自己想看到的请求？那么使用Include吧。只要你在这里配置了请求，那么charles将只拦截匹配的请求，还可以使用正则匹配，例如图片中，只拦截域名以”baidu.com”结束的域名，www.baidu.com、news.baidu.com以及zhidao.baidu.com都可以拦截到，但是不想看到的例如www.taobao.com就看不到了</p><p>3.Exclude</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCEaf03c2b6daaacb1bf0c63901ee4cd20e/981" alt=""></p><p>也许你只想拦截www.baidu.com、news.baidu.com以及别的<em>.baicu.com而不想看到zhidao.baidu.com呢？那就include \</em>.baidu.com，配置exclude zhidao.baidu.com吧</p><h4 id="Map-Remote"><a href="#Map-Remote" class="headerlink" title="Map Remote"></a>Map Remote</h4><p>开发过程中经常遇到需要把远端请求打到本地的情况。尤其是有了node之后，这种需求愈发明显</p><p>例如有以下情况</p><p>原始请求:<a href="http://news.baidu.com/tech/category1/widget?ajax=json&amp;id=ad" target="_blank" rel="noopener">http://news.baidu.com/tech/category1/widget?ajax=json&amp;id=ad</a><br>本地路径:localhost:8080/pages/widget?ajax=json&amp;id=ad</p><p>如果通用的匹配路径可归纳为将<a href="http://news.baidu.com/tech/category1/(abc" target="_blank" rel="noopener">http://news.baidu.com/tech/category1/(abc</a>) 匹配至 localhost:8080/pages/abc</p><p>那么可以如下配置：</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE72abf6622522bd0d92d141d1d97a0bc9/983" alt=""></p><h4 id="BreakPoints"><a href="#BreakPoints" class="headerlink" title="BreakPoints"></a>BreakPoints</h4><p>开发过程中还经常要模拟不同情况的返回值，在百度新闻刷新页面时，会调这么一个接口</p><p>Get: <a href="http://news.baidu.com/passport" target="_blank" rel="noopener">http://news.baidu.com/passport</a></p><p>下面介绍怎么修改它的请求值和返回值，因为这个接口无关紧要，只是在真正登录时返回了用户的用户名供页面展示，一般不会有安全的问题，所以可以直接拦截到，此处只是拿它举一个例子：如何修改请求及返回值。</p><p>用charles拦截到这个请求后，右键–&gt;BreakPoints<br><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE5936e72de2791e2a37dc25ef59b07286/985" alt=""></p><blockquote><p>注：此处右键之后有很多的功能待发掘，例如repeat会重复发送这个请求，或者此处有Map Remote可以直接进入界面设置要把这个路径匹配至哪里等等</p></blockquote><p>下次再刷新页面时，会出现如下界面<br><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE8c4e41076b9fb5f3b2048d14e238da7d/987" alt=""></p><p>有一个Edit Request，在这个界面可以增加或删除参数，或者直接双击name或者value进行编辑，修改完参数之后，点击Execute。有返回之后，会出现如下界面</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCEb949ddcbddd4708ce787568915c4a510/989" alt=""></p><p>界面中有edit Response，同样可以直接修改，修改完之后，点击Execute，请求就完成了，返回的结果可以直接供前端来使用。</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE7d1896954185fe07ac60e5a449c057b6/991" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Charles使用指南&quot;&gt;&lt;a href=&quot;#Charles使用指南&quot; class=&quot;headerlink&quot; title=&quot;Charles使用指南&quot;&gt;&lt;/a&gt;Charles使用指南&lt;/h3&gt;&lt;p&gt;环境： Mac&lt;br&gt;Charles版本：v4.1.3&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>JS原型与原型链</title>
    <link href="http://yoursite.com/2017/JS-prototype/"/>
    <id>http://yoursite.com/2017/JS-prototype/</id>
    <published>2017-10-30T08:56:56.000Z</published>
    <updated>2017-11-21T09:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题的引入"><a href="#问题的引入" class="headerlink" title="问题的引入"></a>问题的引入</h4><p>用控制台输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ var arr = [];</span><br><span class="line">$ arr.length // 0</span><br></pre></td></tr></table></figure><p>问题：为什么arr会有length属性？</p><h4 id="1-显示原型prototype"><a href="#1-显示原型prototype" class="headerlink" title="1. 显示原型prototype"></a>1. 显示原型prototype</h4><ul><li>JavaScript中每一个函数，都有一个prototype属性， 这个属性指向函数的原型对象</li></ul><h5 id="1-1-自定义函数的prototype"><a href="#1-1-自定义函数的prototype" class="headerlink" title="1.1 自定义函数的prototype"></a>1.1 自定义函数的prototype</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fn = function() &#123;&#125;</span><br><span class="line">console.log( fn.prototype );</span><br><span class="line">fn.prototype.constructor === fn;   // true</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2017/11/12/4af86fc38f20ab3e1096f05f7e0e0db9" alt=""></p><h5 id="1-2-内置构造器的prototype"><a href="#1-2-内置构造器的prototype" class="headerlink" title="1.2 内置构造器的prototype"></a>1.2 内置构造器的prototype</h5><p>Array是什么？<br>答：Array是一个函数</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/12/603bed777f274b1b84c6f4c8926b4339" alt=""></p><p>那么Array一定也有一个prototype属性了</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb4ff1bef7bc3e" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ Array.prototype.constructor // f Array()</span><br><span class="line">$ Array.prototype.constructor === Array // true</span><br><span class="line">$ Number.prototype.constructor === Number // true</span><br><span class="line">$ String.prototype.constructor === String // true</span><br><span class="line">$ Function.prototype.constructor === Function // true</span><br><span class="line">$ Object.prototype.constructor === Object // true</span><br></pre></td></tr></table></figure><h5 id="1-3-改变prototype"><a href="#1-3-改变prototype" class="headerlink" title="1.3 改变prototype"></a>1.3 改变prototype</h5><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb5618a38b850a" alt=""></p><p>结论：</p><ul><li>给prototype添加或者删除属性会影响所有已经或者未实例化的对象</li><li>重写prototype只会影响新new出来的对象</li></ul><h4 id="2-隐式原型-proto"><a href="#2-隐式原型-proto" class="headerlink" title="2. 隐式原型__proto__"></a>2. 隐式原型__proto__</h4><ul><li>JavaScript中任意对象都有一个内置属性<strong>proto</strong>， 指向创建这个对象的函数(constructor)的prototype</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br><span class="line">arr.__ptoto__ === Array.prototype // true</span><br></pre></td></tr></table></figure><p>根据”JavaScript中任意对象都有一个内置属性__proto__， 指向创建这个对象的函数(constructor)的prototype”，函数Array创建了对象arr，因此arr的__proto__指向Array.prototype。即</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb4feb2eb4e810" alt=""></p><ul><li>此处提一下Object.create(),Object.create接收两个参数，第一个参数用来作为新对象的隐式原型, 第二个参数是对象的属性描述符。因此<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;LEG_NUM:2 &#125;;</span><br><span class="line">var xiaoMing = Object.create(person);</span><br><span class="line">xiaoMing.__proto__ === person; // true</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-1-改变-proto"><a href="#2-1-改变-proto" class="headerlink" title="2.1 改变__proto__"></a>2.1 改变__proto__</h5><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb5628e12d0785" alt=""></p><p>结论</p><ul><li>改变arr.<strong>proto</strong>等价于改变Array.prototype</li></ul><h4 id="3-原型链"><a href="#3-原型链" class="headerlink" title="3. 原型链"></a>3. 原型链</h4><ul><li>当我们访问某个对象中的某个属性时，如果该对象本身具有这个属性，则直接使用，如果该对象本身没有这个属性，那么就会沿着__proto__依次查找</li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb5576c544462e" alt=""></p><p>上图中，访问obj.z的时候在obj中没有访问到，就会沿着__proto__向上查找，于是在foo.prototype中找到了返回3.</p><p>访问obj.hasOwnProperty()时，同样在obj中没有找到这个属性，沿着__proto__向上查找，直到在Object.prototype中找到这个属性。</p><h4 id="4-instanceof"><a href="#4-instanceof" class="headerlink" title="4. instanceof"></a>4. instanceof</h4><p>instanceof, 左边是一个对象，右边必须是一个函数或构造器。它会判断右边构造器的prototype属性是否出现在左边对象的原型链上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] instanceof Array // true</span><br><span class="line">[] instanceof Object // true</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb55bf5ff07694" alt=""></p><h4 id="5-原型链的优缺点"><a href="#5-原型链的优缺点" class="headerlink" title="5. 原型链的优缺点"></a>5. 原型链的优缺点</h4><ul><li>优点: 节省内存、方便维护</li><li>缺点: 更改原型将影响所有指向它的对象<br>以下是《Javascript高级程序设计》中使用到的例子</li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb55df5e74932a" alt=""></p><p>改变person1的friends，会同时改变person2的friends，因为它们共用一个prototype.这显然不是我们想要的。可以通过如下方法改进</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb55f9e4dab238" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>显式原型的作用<br>用来实现基于原型的继承与属性的共享。</li><li>隐式原型的作用<br>构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问obj这个对象中的x属性时，如果在obj中找不到，那么就会沿着__proto__依次查找。</li><li>二者的关系<br>隐式原型指向创建这个对象的函数(constructor)的prototype</li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://www.zhihu.com/question/34183746" target="_blank" rel="noopener">https://www.zhihu.com/question/34183746</a></li><li><a href="https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173684" target="_blank" rel="noopener">https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173684</a></li><li>《Javascript高级程序设计》(第3版)第6章</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题的引入&quot;&gt;&lt;a href=&quot;#问题的引入&quot; class=&quot;headerlink&quot; title=&quot;问题的引入&quot;&gt;&lt;/a&gt;问题的引入&lt;/h4&gt;&lt;p&gt;用控制台输入如下命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建github博客</title>
    <link href="http://yoursite.com/2017/how-hexo/"/>
    <id>http://yoursite.com/2017/how-hexo/</id>
    <published>2017-10-30T03:06:24.000Z</published>
    <updated>2017-11-21T09:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用hexo搭建github博客"><a href="#使用hexo搭建github博客" class="headerlink" title="使用hexo搭建github博客"></a>使用hexo搭建github博客</h3><p>搭建环境:Mac</p><p>使用hexo的优点：可以使用Markdown编辑页面，各种各样的Markdown编辑器使用起来非常方便</p><h4 id="步骤一、创建github仓库"><a href="#步骤一、创建github仓库" class="headerlink" title="步骤一、创建github仓库"></a>步骤一、创建github仓库</h4><p>在github创建与用户名对应的仓库，如用户名为Lie8466，则需要创建的仓库为 Lie8466.github.io。</p><p><em>参考文档：<a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a> 中的步骤1<br> 注：如果已经创建过，请忽略此步。hexo部署完毕后会更改默认的index页面</em></p><h4 id="步骤二、安装hexo"><a href="#步骤二、安装hexo" class="headerlink" title="步骤二、安装hexo"></a>步骤二、安装hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>手动创建hexo文件夹,假如创建的目录为/Users/yaweili/Documents/hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd /Users/yaweili/Documents/hexo</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>Hexo Server已经启动了，在浏览器中打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，<br>你可以按Ctrl+C 停止Server。</p><p>打开新的命令行窗口(command+T)，创建新文章，”My New Post”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>执行下面的命令，将markdown文件生成静态网页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h5 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h5><p>在/Users/yaweili/Documents/hexo/source/_posts下可以看到My-New-Post.md文件，利用markdown编辑器编辑该文件</p><h5 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h5><p>在/Users/yaweili/Documents/hexo下找到文件_config.yml，用编辑器打开，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/Lie8466/Lie8466.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>安装hexo-deployer-git， 以及部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><em>参考文档 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a><br>部署参考 <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment.html</a> </em></p><h5 id="部署成功"><a href="#部署成功" class="headerlink" title="部署成功"></a>部署成功</h5><p>在浏览器中打开 Lie8466.github.io ，正常显示网页，表明部署成功。</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>修改/Users/yaweili/Documents/hexo/source/_posts下的.md文件，刷新localhost:4000可以看到实时的更新</p><p>部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generation // 或者hexo g</span><br><span class="line">$ hexo deploy // 或者hexo d</span><br></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>/Users/yaweili/Documents/hexo/_config.yml有很多可以自己配置的小功能点，理解每一个配置项的含义可以个性化定制自己的页面</p><h5 id="配置标题"><a href="#配置标题" class="headerlink" title="配置标题"></a>配置标题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Yawei Li // 配置网站首页的大标题，默认为hexo</span><br><span class="line">subtitle: knowing something of everything and everything of something // 配置网站首页的副标题，默认无</span><br><span class="line">description:</span><br><span class="line">author: Yawei Li</span><br><span class="line">language: zh</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><h5 id="配置页面路径"><a href="#配置页面路径" class="headerlink" title="配置页面路径"></a>配置页面路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:title/  // 配置页面的路径，默认为年/月/日/标题，会显示太长，可以自行删掉一些信息</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h5 id="配置分类及标签"><a href="#配置分类及标签" class="headerlink" title="配置分类及标签"></a>配置分类及标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: conclusion</span><br><span class="line">category_map: [&apos;学习笔记&apos;, &apos;总结&apos;, &apos;分享&apos;, &apos;其它&apos;]</span><br><span class="line">tag_map: [&apos;JS&apos;, &apos;Vue&apos;, &apos;前端性能&apos;, &apos;其它&apos;]</span><br></pre></td></tr></table></figure><p>上述配置的分类和标签可以在新建的.md文件中使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo搭建github博客</span><br><span class="line"></span><br><span class="line">date: 2017-10-30 11:06:24</span><br><span class="line"></span><br><span class="line">category: 总结</span><br><span class="line"></span><br><span class="line">tags: 其它</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>配置完成的分类和标签会在博客首页有相应的筛选项，可以快速查找某一个类型或者某个标签下的文章。</p><p>更多功能等待发现。。。</p><p><em><br>参考文档：<a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhcncn/p/4097881.html</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用hexo搭建github博客&quot;&gt;&lt;a href=&quot;#使用hexo搭建github博客&quot; class=&quot;headerlink&quot; title=&quot;使用hexo搭建github博客&quot;&gt;&lt;/a&gt;使用hexo搭建github博客&lt;/h3&gt;&lt;p&gt;搭建环境:Mac&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
</feed>
