<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yawei Li</title>
  
  <subtitle>knowing something of everything and everything of something</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-09T09:42:11.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yawei Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>讲讲PWA</title>
    <link href="http://yoursite.com/2017/what-pwa/"/>
    <id>http://yoursite.com/2017/what-pwa/</id>
    <published>2017-12-09T02:40:09.000Z</published>
    <updated>2017-12-09T09:42:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>文章<a href="http://mp.weixin.qq.com/s/LvooedOYCJzM8G20Tlw0HQ" target="_blank" rel="noopener">2017 前端大事件和趋势回顾，2018 何去何从？</a>中提到了2017年前端值得关注的十大事件，其中就提到了PWA。</p><a id="more"></a><p>大家都知道Native app体验确实很好，下载到手机上之后入口也方便。它也有一些缺点:</p><ul><li>开发成本高(ios和安卓)</li><li>软件上线需要审核</li><li>版本更新需要将新版本上传到不同的应用商店</li><li>想使用一个app就必须去下载才能使用，即使是偶尔需要使用一下下</li></ul><p>而web网页开发成本低，网站更新时上传最新的资源到服务器即可，用手机带的浏览器打开就可以使用。但是出了体验上比Native app还是差一些，还有一些明显的缺点</p><ul><li>手机桌面入口不够便捷，想要进入一个页面必须要记住它的url或者加入书签</li><li>没网络就没响应，不具备离线能力</li><li>不像APP一样能进行消息推送</li></ul><p>那么什么是PWA呢？</p><h2 id="What’s-PWA"><a href="#What’s-PWA" class="headerlink" title="What’s PWA?"></a>What’s PWA?</h2><p>PWA全称Progressive Web App，即渐进式WEB应用。</p><p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能<br>解决了哪些问题？</p><ul><li>可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏</li><li>实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能</li><li>实现了消息推送</li></ul><p>它解决了上述提到的问题，这些特性将使得 Web 应用渐进式接近原生 App。</p><h2 id="PWA的实现"><a href="#PWA的实现" class="headerlink" title="PWA的实现"></a>PWA的实现</h2><h3 id="Manifest实现添加至主屏幕"><a href="#Manifest实现添加至主屏幕" class="headerlink" title="Manifest实现添加至主屏幕"></a>Manifest实现添加至主屏幕</h3><p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Minimal PWA&lt;/title&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot; /&gt;</span><br><span class="line">  &lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot; /&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;main.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;icon&quot; href=&quot;/e.png&quot; type=&quot;image/png&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></p><p>manifest.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Minimal PWA&quot;, // 必填 显示的插件名称</span><br><span class="line">  &quot;short_name&quot;: &quot;PWA Demo&quot;, // 可选  在APP launcher和新的tab页显示，如果没有设置，则使用name</span><br><span class="line">  &quot;description&quot;: &quot;The app that helps you understand PWA&quot;, //用于描述应用</span><br><span class="line">  &quot;display&quot;: &quot;standalone&quot;, // 定义开发人员对Web应用程序的首选显示模式。standalone模式会有单独的</span><br><span class="line">  &quot;start_url&quot;: &quot;/&quot;, // 应用启动时的url</span><br><span class="line">  &quot;theme_color&quot;: &quot;#313131&quot;, // 桌面图标的背景色</span><br><span class="line">  &quot;background_color&quot;: &quot;#313131&quot;, // 为web应用程序预定义的背景颜色。在启动web应用程序和加载应用程序的内容之间创建了一个平滑的过渡。</span><br><span class="line">  &quot;icons&quot;: [ // 桌面图标，是一个数组</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;src&quot;: &quot;icon/lowres.webp&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;48x48&quot;,  // 以空格分隔的图片尺寸</span><br><span class="line">    &quot;type&quot;: &quot;image/webp&quot;  // 帮助userAgent快速排除不支持的类型</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;src&quot;: &quot;icon/lowres&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;48x48&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;src&quot;: &quot;icon/hd_hi.ico&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;72x72 96x96 128x128 256x256&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;src&quot;: &quot;icon/hd_hi.svg&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;72x72&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Manifest参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Manifest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Manifest</a></p><p>可以打开网站<a href="https://developers.google.cn/web/showcase/2015/chrome-dev-summit" target="_blank" rel="noopener">https://developers.google.cn/web/showcase/2015/chrome-dev-summit</a>查看添加至主屏幕的动图。</p><p>如果用的是安卓手机，可以下载chrome浏览器自己操作看看</p></blockquote><h3 id="service-worker实现离线缓存"><a href="#service-worker实现离线缓存" class="headerlink" title="service worker实现离线缓存"></a>service worker实现离线缓存</h3><h4 id="什么是service-worker"><a href="#什么是service-worker" class="headerlink" title="什么是service worker"></a>什么是service worker</h4><p>Service Worker 是 Chrome 团队提出和力推的一个 WEB API，用于给 web 应用提供高级的可持续的后台处理能力。</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/16039396096bdcf6?w=747&amp;h=240&amp;f=png&amp;s=38487" alt=""></p><p>Service Workers 就像介于服务器和网页之间的拦截器，能够拦截进出的HTTP 请求，从而完全控制你的网站。</p><p><strong>最主要的特点</strong></p><ul><li>在页面中注册并安装成功后，运行于浏览器后台，不受页面刷新的影响，可以监听和截拦作用域范围内所有页面的 HTTP 请求。</li><li>网站必须使用 HTTPS。除了使用本地开发环境调试时(如域名使用 localhost)</li><li>运行于浏览器后台，可以控制打开的作用域范围下所有的页面请求</li><li>单独的作用域范围，单独的运行环境和执行线程</li><li>不能操作页面 DOM。但可以通过事件机制来处理</li><li>事件驱动型服务线程</li></ul><blockquote><p>为什么要求网站必须是HTTPS的，大概是因为service worker权限太大能拦截所有页面的请求吧，如果http的网站安装service worker很容易被攻击</p></blockquote><p><strong>浏览器支持情况</strong></p><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/160393cb31d1ccfb?w=2494&amp;h=588&amp;f=png&amp;s=128215" alt=""></p><blockquote><p>浏览器支持情况详见： <a href="https://caniuse.com/#feat=serviceworkers" target="_blank" rel="noopener">https://caniuse.com/#feat=serviceworkers</a></p></blockquote><p><strong>生命周期</strong></p><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/160393d622433702?w=726&amp;h=629&amp;f=png&amp;s=97827" alt=""></p><p>当用户首次导航至 URL 时，服务器会返回响应的网页。</p><ul><li>第1步:当你调用 register() 函数时， Service Worker 开始下载。</li><li>第2步:在注册过程中，浏览器会下载、解析并执行 Service Worker ()。如果在此步骤中出现任何错误，register() 返回的 promise 都会执行 reject 操作，并且 Service Worker 会被废弃。</li><li>第3步:一旦 Service Worker 成功执行了，install 事件就会激活</li><li>第4步:安装完成，Service Worker 便会激活，并控制在其范围内的一切。如果生命周期中的所有事件都成功了，Service Worker 便已准备就绪，随时可以使用了！</li></ul><blockquote><p><a href="chrome://serviceworker-internals" target="_blank" rel="noopener">chrome://serviceworker-internals</a> 来了解当前浏览器中所有已安装Service Worker的详细情况</p></blockquote><h4 id="HTTP缓存与service-worker缓存"><a href="#HTTP缓存与service-worker缓存" class="headerlink" title="HTTP缓存与service worker缓存"></a>HTTP缓存与service worker缓存</h4><ul><li>HTTP缓存</li></ul><p>Web 服务器可以使用 Expires 首部来通知 Web 客户端，它可以使用资源的当前副本，直到指定的“过期时间”。反过来，浏览器可以缓存此资源，并且只有在有效期满后才会再次检查新版本。<br>使用 HTTP 缓存意味着你要依赖服务器来告诉你何时缓存资源和何时过期。</p><ul><li>service worker缓存</li></ul><p>Service Workers 的强大在于它们拦截 HTTP 请求的能力<br>进入任何传入的 HTTP 请求，并决定想要如何响应。在你的 Service Worker 中，可以编写逻辑来决定想要缓存的资源，以及需要满足什么条件和资源需要缓存多久。一切尽归你掌控！</p><h4 id="实现离线缓存"><a href="#实现离线缓存" class="headerlink" title="实现离线缓存"></a>实现离线缓存</h4><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello Caching World!&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- Image --&gt;</span><br><span class="line">    &lt;img src=&quot;/images/hello.png&quot; /&gt;</span><br><span class="line">    &lt;!-- JavaScript --&gt;</span><br><span class="line">    &lt;script async src=&quot;/js/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 注册 service worker</span><br><span class="line">      if (&apos;serviceWorker&apos; in navigator) &#123;</span><br><span class="line">        navigator.serviceWorker.register(&apos;/service-worker.js&apos;, &#123;scope: &apos;/&apos;&#125;).then(function (registration) &#123;</span><br><span class="line">          // 注册成功</span><br><span class="line">          console.log(&apos;ServiceWorker registration successful with scope: &apos;, registration.scope);</span><br><span class="line">        &#125;).catch(function (err) &#123;</span><br><span class="line">          // 注册失败 :(</span><br><span class="line">          console.log(&apos;ServiceWorker registration failed: &apos;, err);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注：Service Worker 的注册路径决定了其 scope 默认作用页面的范围。<br>如果 service-worker.js 是在 /sw/ 页面路径下，这使得该 Service Worker 默认只会收到 页面/sw/ 路径下的 fetch 事件。<br>如果存放在网站的根路径下，则将会收到该网站的所有 fetch 事件。<br>如果希望改变它的作用域，可在第二个参数设置 scope 范围。示例中将其改为了根目录，即对整个站点生效。</p></blockquote><p>service-worker.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">var cacheName = &apos;helloWorld&apos;;     // 缓存的名称</span><br><span class="line">// install 事件，它发生在浏览器安装并注册 Service Worker 时</span><br><span class="line">self.addEventListener(&apos;install&apos;, event =&gt; &#123;</span><br><span class="line">/* event.waitUtil 用于在安装成功之前执行一些预装逻辑</span><br><span class="line"> 但是建议只做一些轻量级和非常重要资源的缓存，减少安装失败的概率</span><br><span class="line"> 安装成功后 ServiceWorker 状态会从 installing 变为 installed */</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.open(cacheName)</span><br><span class="line">    .then(cache =&gt; cache.addAll([    // 如果所有的文件都成功缓存了，便会安装完成。如果任何文件下载失败了，那么安装过程也会随之失败。</span><br><span class="line">      &apos;/js/script.js&apos;,</span><br><span class="line">      &apos;/images/hello.png&apos;</span><br><span class="line">    ]))</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">为 fetch 事件添加一个事件监听器。接下来，使用 caches.match() 函数来检查传入的请求 URL 是否匹配当前缓存中存在的任何内容。如果存在的话，返回缓存的资源。</span><br><span class="line">如果资源并不存在于缓存当中，通过网络来获取资源，并将获取到的资源添加到缓存中。</span><br><span class="line">*/</span><br><span class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request)</span><br><span class="line">    .then(function (response) &#123;</span><br><span class="line">      if (response) &#123;</span><br><span class="line">        return response;</span><br><span class="line">      &#125;</span><br><span class="line">      var requestToCache = event.request.clone();  //</span><br><span class="line">      return fetch(requestToCache).then(</span><br><span class="line">        function (response) &#123;</span><br><span class="line">          if (!response || response.status !== 200) &#123;</span><br><span class="line">            return response;</span><br><span class="line">          &#125;</span><br><span class="line">          var responseToCache = response.clone();</span><br><span class="line">          caches.open(cacheName)</span><br><span class="line">            .then(function (cache) &#123;</span><br><span class="line">              cache.put(requestToCache, responseToCache);</span><br><span class="line">            &#125;);</span><br><span class="line">          return response;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注：为什么用request.clone()和response.clone()<br>需要这么做是因为request和response是一个流，它只能消耗一次。因为我们已经通过缓存消耗了一次，然后发起 HTTP 请求还要再消耗一次，所以我们需要在此时克隆请求<br>Clone the request—a request is a stream and can only be consumed once.</p></blockquote><h4 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h4><p>chrome浏览器打开<a href="https://googlechrome.github.io/samples/service-worker/basic/index.html" target="_blank" rel="noopener">https://googlechrome.github.io/samples/service-worker/basic/index.html</a>，这是一个实现了service worker离线缓存功能的网站，打开调试工具</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/1603946bc58c95b3?w=1438&amp;h=430&amp;f=png&amp;s=149063" alt=""></p><p>介绍一个图中的1.和2.</p><ol><li>勾选可以模拟网站离线情况，勾选后network会有一个黄色警告图标，该网站已经离线。此时刷新页面，页面仍然能够正常显示</li><li>当前service worker的scope。它能够拦截<a href="https://googlechrome.github.io/samples/service-worker/basic/index.html下的请求，同样也能够拦截https://googlechrome.github.io/samples/service-worker/basic/\*/\*.html下的请求" target="_blank" rel="noopener">https://googlechrome.github.io/samples/service-worker/basic/index.html下的请求，同样也能够拦截https://googlechrome.github.io/samples/service-worker/basic/\*/\*.html下的请求</a></li></ol><blockquote><p>调试面板具体代表的什么参看<a href="https://x5.tencent.com/tbs/guide/serviceworker.html" target="_blank" rel="noopener">https://x5.tencent.com/tbs/guide/serviceworker.html</a>的第三部分</p></blockquote><h3 id="serice-worker实现消息推送"><a href="#serice-worker实现消息推送" class="headerlink" title="serice worker实现消息推送"></a>serice worker实现消息推送</h3><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/160394ac4f074f79?w=677&amp;h=368&amp;f=png&amp;s=64102" alt=""></p><ul><li>步骤一、提示用户并获得他们的订阅详细信息</li><li>步骤二、将这些详细信息保存在服务器上</li><li>步骤三、在需要时发送任何消息</li></ul><blockquote><p>不同浏览器需要用不同的推送消息服务器。以 Chrome 上使用 Google Cloud Messaging<gcm> 作为推送服务为例，第一步是注册 applicationServerKey(通过 GCM 注册获取)，并在页面上进行订阅或发起订阅。每一个会话会有一个独立的端点（endpoint），订阅对象的属性(PushSubscription.endpoint) 即为端点值。将端点发送给服务器后，服务器用这一值来发送消息给会话的激活的 Service Worker （通过 GCM 与浏览器客户端沟通）。</gcm></p></blockquote><p><strong>步骤一和步骤二</strong><br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Progressive Times&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var endpoint;</span><br><span class="line">      var key;</span><br><span class="line">      var authSecret;</span><br><span class="line">      var vapidPublicKey = &apos;BAyb_WgaR0L0pODaR7wWkxJi__tWbM1MPBymyRDFEGjtDCWeRYS9EF7yGoCHLdHJi6hikYdg4MuYaK0XoD0qnoY&apos;;</span><br><span class="line">      // 方法很复杂，但是可以不用具体看，知识用来转化vapidPublicKey用</span><br><span class="line">      function urlBase64ToUint8Array(base64String) &#123;</span><br><span class="line">        const padding = &apos;=&apos;.repeat((4 - base64String.length % 4) % 4);</span><br><span class="line">        const base64 = (base64String + padding)</span><br><span class="line">          .replace(/\-/g, &apos;+&apos;)</span><br><span class="line">          .replace(/_/g, &apos;/&apos;);</span><br><span class="line">        const rawData = window.atob(base64);</span><br><span class="line">        const outputArray = new Uint8Array(rawData.length);</span><br><span class="line">        for (let i = 0; i &lt; rawData.length; ++i) &#123;</span><br><span class="line">          outputArray[i] = rawData.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return outputArray;</span><br><span class="line">      &#125;</span><br><span class="line">      if (&apos;serviceWorker&apos; in navigator) &#123;</span><br><span class="line">        navigator.serviceWorker.register(&apos;sw.js&apos;).then(function (registration) &#123;</span><br><span class="line">          return registration.pushManager.getSubscription()</span><br><span class="line">            .then(function (subscription) &#123;</span><br><span class="line">              if (subscription) &#123;</span><br><span class="line">                return;</span><br><span class="line">              &#125;</span><br><span class="line">              return registration.pushManager.subscribe(&#123;</span><br><span class="line">                  userVisibleOnly: true,</span><br><span class="line">                  applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(function (subscription) &#123;</span><br><span class="line">                  var rawKey = subscription.getKey ? subscription.getKey(&apos;p256dh&apos;) : &apos;&apos;;</span><br><span class="line">                  key = rawKey ? btoa(String.fromCharCode.apply(null, new Uint8Array(rawKey))) : &apos;&apos;;</span><br><span class="line">                  var rawAuthSecret = subscription.getKey ? subscription.getKey(&apos;auth&apos;) : &apos;&apos;;</span><br><span class="line">                  authSecret = rawAuthSecret ?</span><br><span class="line">                    btoa(String.fromCharCode.apply(null, new Uint8Array(rawAuthSecret))) : &apos;&apos;;</span><br><span class="line">                  endpoint = subscription.endpoint;</span><br><span class="line">                  return fetch(&apos;./register&apos;, &#123;</span><br><span class="line">                    method: &apos;post&apos;,</span><br><span class="line">                    headers: new Headers(&#123;</span><br><span class="line">                      &apos;content-type&apos;: &apos;application/json&apos;</span><br><span class="line">                    &#125;),</span><br><span class="line">                    body: JSON.stringify(&#123;</span><br><span class="line">                      endpoint: subscription.endpoint,</span><br><span class="line">                      key: key,</span><br><span class="line">                      authSecret: authSecret,</span><br><span class="line">                    &#125;),</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;).catch(function (err) &#123;</span><br><span class="line">          // 注册失败 :(</span><br><span class="line">          console.log(&apos;ServiceWorker registration failed: &apos;, err);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>步骤三 服务器发送消息给service worker</strong></p><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const webpush = require(&apos;web-push&apos;);</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">const app = express();</span><br><span class="line">webpush.setVapidDetails(</span><br><span class="line">  &apos;mailto:contact@deanhume.com&apos;,</span><br><span class="line">  &apos;BAyb_WgaR0L0pODaR7wWkxJi__tWbM1MPBymyRDFEGjtDCWeRYS9EF7yGoCHLdHJi6hikYdg4MuYaK0XoD0qnoY&apos;,</span><br><span class="line">  &apos;p6YVD7t8HkABoez1CvVJ5bl7BnEdKUu5bSyVjyxMBh0&apos;</span><br><span class="line">);</span><br><span class="line">app.post(&apos;/register&apos;, function (req, res) &#123;</span><br><span class="line">  var endpoint = req.body.endpoint;</span><br><span class="line">  saveRegistrationDetails(endpoint, key, authSecret);</span><br><span class="line">  const pushSubscription = &#123;</span><br><span class="line">    endpoint: req.body.endpoint,</span><br><span class="line">    keys: &#123;</span><br><span class="line">      auth: req.body.authSecret,</span><br><span class="line">      p256dh: req.body.key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  var body = &apos;Thank you for registering&apos;;</span><br><span class="line">  var iconUrl = &apos;https://example.com/images/homescreen.png&apos;;</span><br><span class="line">  // 发送 Web 推送消息</span><br><span class="line">  webpush.sendNotification(pushSubscription,</span><br><span class="line">      JSON.stringify(&#123;</span><br><span class="line">        msg: body,</span><br><span class="line">        url: &apos;http://localhost:3111/&apos;,</span><br><span class="line">        icon: iconUrl</span><br><span class="line">      &#125;))</span><br><span class="line">    .then(result =&gt; res.sendStatus(201))</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">      console.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3111, function () &#123;</span><br><span class="line">  console.log(&apos;Web push app listening on port 3111!&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>service worker监听push事件，将通知详情推送给用户</strong></p><p>service-worker.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&apos;push&apos;, function (event) &#123;</span><br><span class="line"> // 检查服务端是否发来了任何有效载荷数据</span><br><span class="line">  var payload = event.data ? JSON.parse(event.data.text()) : &apos;no payload&apos;;</span><br><span class="line">  var title = &apos;Progressive Times&apos;;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    // 使用提供的信息来显示 Web 推送通知</span><br><span class="line">    self.registration.showNotification(title, &#123;</span><br><span class="line">      body: payload.msg,</span><br><span class="line">      url: payload.url,</span><br><span class="line">      icon: payload.icon</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>扩展知识：<a href="https://lzw.me/a/pwa-service-worker.html#3.3 Service Worker 的更新" target="_blank" rel="noopener">service worker的更新</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="PWA的优势"><a href="#PWA的优势" class="headerlink" title="PWA的优势"></a>PWA的优势</h3><ul><li>可以将app的快捷方式放置到桌面上，全屏运行，与原生app无异</li><li>能够在各种网络环境下使用，包括网络差和断网条件下，不会显示undefind</li><li>推送消息的能力</li><li>其本质是一个网页，没有原生app的各种启动条件，快速响应用户指令<h3 id="PWA存在的问题"><a href="#PWA存在的问题" class="headerlink" title="PWA存在的问题"></a>PWA存在的问题</h3></li><li>支持率不高:现在ios手机端不支持pwa，IE也暂时不支持</li><li>Chrome在中国桌面版占有率还是不错的，安卓移动端上的占有率却很低</li><li>各大厂商还未明确支持pwa</li><li>依赖的GCM服务在国内无法使用</li><li>微信小程序的竞争</li></ul><p>尽管有上述的一些缺点，PWA技术仍然有很多可以使用的点。</p><ul><li>service worker技术实现离线缓存，可以将一些不经常更改的静态文件放到缓存中，提升用户体验。</li><li>service worker实现消息推送，使用浏览器推送功能，吸引用户</li><li>渐进式开发，尽管一些浏览器暂时不支持，可以利用上述技术给使用支持浏览器的用户带来更好的体验。</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/SangKa/PWA-Book-CN" target="_blank" rel="noopener">第一本 PWA 中文书</a></li><li><a href="https://github.com/deanhume/progressive-web-apps-book" target="_blank" rel="noopener">PWA 英文书</a></li><li><a href="https://lzw.me/a/pwa-service-worker.html" target="_blank" rel="noopener">网站渐进式增强体验(PWA)改造：Service Worker 应用详解</a></li><li><a href="https://googlechrome.github.io/samples/service-worker/basic/index.html" target="_blank" rel="noopener">Basic Service Worker Sample</a></li><li><a href="https://www.w3ctech.com/topic/866" target="_blank" rel="noopener">【翻译】Service Worker 入门</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Manifest" target="_blank" rel="noopener">Web App Manifest</a></li><li><a href="https://developers.google.com/web/fundamentals/primers/service-workers/" target="_blank" rel="noopener">Service Workers: an Introduction</a></li><li><a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/" target="_blank" rel="noopener">The Offline Cookbook</a></li><li><a href="http://blog.csdn.net/baidu_browser/article/details/64440238" target="_blank" rel="noopener">微信小程序和PWA对比分析</a></li><li><a href="https://x5.tencent.com/tbs/guide/serviceworker.html" target="_blank" rel="noopener">Service Worker最佳实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;文章&lt;a href=&quot;http://mp.weixin.qq.com/s/LvooedOYCJzM8G20Tlw0HQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2017 前端大事件和趋势回顾，2018 何去何从？&lt;/a&gt;中提到了2017年前端值得关注的十大事件，其中就提到了PWA。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="pwa" scheme="http://yoursite.com/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>node+express实现图片上传功能</title>
    <link href="http://yoursite.com/2017/node-express/"/>
    <id>http://yoursite.com/2017/node-express/</id>
    <published>2017-11-27T05:27:26.000Z</published>
    <updated>2017-12-09T09:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇文章适用于node刚刚入门的读者。</p><p>本篇文章使用node+express实现了一个简单的图片上传功能：用户点击图片上传，会跳转到上传成功页面并展示上传的图片。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直想找资料入门node，试着一步步实现一个功能，都没有合适的资料。直到看到<a href="https://www.nodebeginner.org/index-zh-cn.html#" target="_blank" rel="noopener">https://www.nodebeginner.org/index-zh-cn.html#</a> ，这本书教你如何<strong>一步一步</strong>结合基本的API搭建一个简单的应用，实现了简单的图片上传功能。我看完之后终于感觉自己<strong>基本入门</strong>node了。文章中有附源码地址，<a href="https://github.com/manuelkiessling/nodebeginner.org/tree/master/code/application" target="_blank" rel="noopener">https://github.com/manuelkiessling/nodebeginner.org/tree/master/code/application</a> ，如果你感觉还没有入门node，可以试试这本书。</p><p>当然我的建议是跟着教程一步步修改代码，而不是直接将源码clone下来。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>文章到后面给出页面展示的html是以<code>response.write(body);</code>的方式写的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function start(response) &#123;</span><br><span class="line">console.log(&quot;Request handler &apos;start&apos; was called.&quot;);</span><br><span class="line"></span><br><span class="line">var body = &apos;&lt;html&gt;&apos;+</span><br><span class="line">&apos;&lt;head&gt;&apos;+</span><br><span class="line">&apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &apos;+</span><br><span class="line">&apos;charset=UTF-8&quot; /&gt;&apos;+</span><br><span class="line">&apos;&lt;/head&gt;&apos;+</span><br><span class="line">&apos;&lt;body&gt;&apos;+</span><br><span class="line">&apos;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &apos;+</span><br><span class="line">&apos;method=&quot;post&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;&apos;+</span><br><span class="line">&apos;&lt;/form&gt;&apos;+</span><br><span class="line">&apos;&lt;/body&gt;&apos;+</span><br><span class="line">&apos;&lt;/html&gt;&apos;;</span><br><span class="line"></span><br><span class="line">response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/html&quot;&#125;);</span><br><span class="line">response.write(body);</span><br><span class="line">response.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际应用中肯定不能以这样的方式写html文件，所以接下来就教你用node+express实现同样的功能，使我们的代码看起来更优雅</p><h2 id="node-express实现图片上传功能"><a href="#node-express实现图片上传功能" class="headerlink" title="node+express实现图片上传功能"></a>node+express实现图片上传功能</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>mac+node(v9.2.0)+express</p><h3 id="安装express"><a href="#安装express" class="headerlink" title="安装express"></a>安装express</h3><blockquote><p>express官网:<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a></p></blockquote><p>新建文件夹<code>node-app</code>，在文件夹下新建<code>package.json</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;node-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.2&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>npm install</code>。新建<code>app.js</code>，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">    res.send(&apos;Hello World!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var server = app.listen(3000, function () &#123;</span><br><span class="line">    var host = server.address().address;</span><br><span class="line">    var port = server.address().port;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;Example app listening at http://%s:%s&apos;, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行<code>node app.js</code>，打开<a href="localhost:3000" target="_blank" rel="noopener">localhost:3000</a>，应用已经跑起来了</p><h3 id="利用-Express-托管静态文件"><a href="#利用-Express-托管静态文件" class="headerlink" title="利用 Express 托管静态文件"></a>利用 Express 托管静态文件</h3><p>下面利用 Express 托管静态文件，在<code>node-app</code>下新建文件夹<code>public</code>，新建两个html文件</p><ul><li>start.html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;请上传您的文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;./upload.html&quot; enctype=&quot;multipart/form-data&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>upload.html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;上传成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;上传成功&lt;/h1&gt;</span><br><span class="line">    &lt;img  src=&quot;/public/test.png&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改<code>app.js</code>，增加<code>app.use(&#39;/public&#39;, express.static(&#39;public&#39;));</code>。修改后<code>app.js</code>如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">    res.send(&apos;Hello World!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&apos;/public&apos;, express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">var server = app.listen(3000, function () &#123;</span><br><span class="line">    var host = server.address().address;</span><br><span class="line">    var port = server.address().port;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;Example app listening at http://%s:%s&apos;, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>现在，public 目录下面的文件就可以访问了。</p><blockquote><p>参考文档：<a href="http://www.expressjs.com.cn/starter/static-files.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/starter/static-files.html</a></p></blockquote><p>重启node服务，打开<br><code>http://localhost:3000/public/start.html</code>，选择文件上传之后，页面就会自动跳转到上传成功页面</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/25/15ff0e22bfb38f51?w=756&amp;h=176&amp;f=png&amp;s=25194" alt=""></p><h3 id="处理上传的图片"><a href="#处理上传的图片" class="headerlink" title="处理上传的图片"></a>处理上传的图片</h3><p>使用模块<code>formidable</code>处理请求数据。在<code>package.json</code>中增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;express&quot;: &quot;^4.16.2&quot;,</span><br><span class="line">  &quot;formidable&quot;: &quot;^1.1.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>npm install</code>。</p><p>文件上传自然要用到post请求,更改<code>start.html</code>，改为<code>method=&quot;post&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>处理post请求用到的Express的路由</p><blockquote><p>参考 <a href="http://www.expressjs.com.cn/starter/basic-routing.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/starter/basic-routing.html</a></p></blockquote><p>修改后的<code>app.js</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">var formidable = require(&quot;formidable&quot;);</span><br><span class="line">fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">    res.send(&apos;Hello World!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&apos;/public&apos;, express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">app.post(&apos;/upload&apos;, function (req, res) &#123;</span><br><span class="line">    var form = new formidable.IncomingForm();</span><br><span class="line">    console.log(&quot;about to parse&quot;);</span><br><span class="line">    form.parse(req, function(error, fields, files) &#123;</span><br><span class="line">        console.log(&quot;parsing done&quot;);</span><br><span class="line">        console.log(files.upload.path);</span><br><span class="line">        fs.writeFileSync(&quot;public/test.png&quot;, fs.readFileSync(files.upload.path));</span><br><span class="line">        res.redirect(&quot;/public/upload.html&quot;) ;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var server = app.listen(3000, function () &#123;</span><br><span class="line">    var host = server.address().address;</span><br><span class="line">    var port = server.address().port;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;Example app listening at http://%s:%s&apos;, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>public</code>文件夹下新增<code>upload.html</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;上传成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;上传成功&lt;/h1&gt;</span><br><span class="line">    &lt;img  src=&quot;/public/test.png&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>嗯，大功告成啦。重新启动服务，打开 <a href="http://localhost:3000/public/start.html" target="_blank" rel="noopener">http://localhost:3000/public/start.html</a> 选择一个图片上传，就能看到自己上传的图片了！</p><p>源码附上，<a href="https://github.com/Lie8466/node-app/tree/node-express" target="_blank" rel="noopener">https://github.com/Lie8466/node-app/tree/node-express</a></p><p>感谢您的阅读！这是我的学习过程，希望对你有所帮助~</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.nodebeginner.org/index-zh-cn.html#" target="_blank" rel="noopener">https://www.nodebeginner.org/index-zh-cn.html#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本篇文章适用于node刚刚入门的读者。&lt;/p&gt;
&lt;p&gt;本篇文章使用node+express实现了一个简单的图片上传功能：用户点击图片上传，会跳转到上传成功页面并展示上传的图片。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>浅析&quot;对arguments对象使用Array.prototype.slice()可以将其转化为数组&quot;</title>
    <link href="http://yoursite.com/2017/arguments-slice/"/>
    <id>http://yoursite.com/2017/arguments-slice/</id>
    <published>2017-11-21T03:34:05.000Z</published>
    <updated>2017-12-09T09:43:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>《Javascript高级程序设计(第3版)》的250页有一句话叫“对arguments对象使用Array.prototype.slice()可以将其转化为数组”，为什么这么说？</p><a id="more"></a><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>Js中的每一个函数(箭头函数除外)自动获得两个变量this和arguments。因此随便定义一个非箭头函数，可以打印出它的auguments;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; function add (a, b) &#123; return arguments;&#125;</span><br><span class="line">&gt; var arg = add (1, 2);</span><br><span class="line">&gt; arg  // 打印arg</span><br></pre></td></tr></table></figure><p>打印结果<br><img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdc92725301f34?w=796&amp;h=348&amp;f=png&amp;s=52299" alt=""></p><p>arg并不是一个数组，但是可以通过arg[0],arg[1]及arg.length来获取参数的一些属性。可以通过Array.prototype.slice()来将其转化为一个数组</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdc993c8e020d5?w=882&amp;h=578&amp;f=png&amp;s=85993" alt=""></p><p>上图中可以看出以下两点：</p><p>1.Array.prototype.slice()返回一个新数组<br>2.Array.prototype.slice()并不会影响其参数</p><h2 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a>Array.prototype.slice()</h2><p>Array.prototype.slice是怎么实现返回一个新数组的呢？网上也有一些通过看源码来解析其原理的文章，例如 <a href="http://www.cnblogs.com/henryli/p/3700945.html" target="_blank" rel="noopener">http://www.cnblogs.com/henryli/p/3700945.html</a> ，但是作为一个前端这个理解起来有一定的困难，我的建议是查看loadash对slice的实现来理解一下其原理。<br>文档:<a href="http://lodash.think2011.net/slice" target="_blank" rel="noopener">http://lodash.think2011.net/slice</a><br>源码：<a href="https://github.com/lodash/lodash/blob/master/slice.js" target="_blank" rel="noopener">https://github.com/lodash/lodash/blob/master/slice.js</a></p><p>_.slice(array, [start=0], [end=array.length])<br>创建一个裁剪后的数组，从 start 到 end 的位置，但不包括 end 本身的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Creates a slice of `array` from `start` up to, but not including, `end`.</span><br><span class="line"> *</span><br><span class="line"> * **Note:** This method is used instead of</span><br><span class="line"> * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are</span><br><span class="line"> * returned.</span><br><span class="line"> *</span><br><span class="line"> * @since 3.0.0</span><br><span class="line"> * @category Array</span><br><span class="line"> * @param &#123;Array&#125; array The array to slice.</span><br><span class="line"> * @param &#123;number&#125; [start=0] The start position.</span><br><span class="line"> * @param &#123;number&#125; [end=array.length] The end position.</span><br><span class="line"> * @returns &#123;Array&#125; Returns the slice of `array`.</span><br><span class="line"> */</span><br><span class="line">function slice(array, start, end) &#123;</span><br><span class="line">  let length = array == null ? 0 : array.length</span><br><span class="line">  if (!length) &#123;</span><br><span class="line">    return []</span><br><span class="line">  &#125;</span><br><span class="line">  start = start == null ? 0 : start</span><br><span class="line">  end = end === undefined ? length : end</span><br><span class="line"></span><br><span class="line">  if (start &lt; 0) &#123;</span><br><span class="line">    start = -start &gt; length ? 0 : (length + start)</span><br><span class="line">  &#125;</span><br><span class="line">  end = end &gt; length ? length : end</span><br><span class="line">  if (end &lt; 0) &#123;</span><br><span class="line">    end += length</span><br><span class="line">  &#125;</span><br><span class="line">  length = start &gt; end ? 0 : ((end - start) &gt;&gt;&gt; 0)</span><br><span class="line">  start &gt;&gt;&gt;= 0</span><br><span class="line"></span><br><span class="line">  let index = -1</span><br><span class="line">  const result = new Array(length)</span><br><span class="line">  while (++index &lt; length) &#123;</span><br><span class="line">    result[index] = array[index + start]</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此当我们使用Array.prototype.slice.call(arg, 0)时，实际上返回了一个新的数组result,该数组的长度等于arg.length，其元素包含从0到arg.length的所有元素，即arg[0],arg[1]</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;《Javascript高级程序设计(第3版)》的250页有一句话叫“对arguments对象使用Array.prototype.slice()可以将其转化为数组”，为什么这么说？&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Charles使用指南</title>
    <link href="http://yoursite.com/2017/how-charles/"/>
    <id>http://yoursite.com/2017/how-charles/</id>
    <published>2017-11-10T11:42:37.000Z</published>
    <updated>2017-12-09T09:44:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境： Mac<br>Charles版本：v4.1.3</p><p>charles是Mac上很好用的抓包工具。在需要跨页面的查看所有请求时，Chrome的network已经不能满足这个要求，此时使用charles再好不过了。另外还可以使用charles更改请求和返回数据、使请求打到不同的环境等。下面介绍几个常用的技巧。</p><a id="more"></a><h4 id="Recording-settings"><a href="#Recording-settings" class="headerlink" title="Recording settings"></a>Recording settings</h4><p>打开Proxy-&gt;Recording Settings，有以下三个选项</p><p>1.options</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE91a698175012928073c4f5ae3685fc67/973" alt=""></p><p>Max Requests: 限制当前存储的最多请求数，超过这个数字的日期较早的请求将会被自动清除掉。再也不用手动点清除按钮了</p><p>2.Include</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE0af1bfea9e344a793c93034eaa99d859/977" alt=""></p><p>太多的请求眼花缭乱，看不到自己想看到的请求？那么使用Include吧。只要你在这里配置了请求，那么charles将只拦截匹配的请求，还可以使用正则匹配，例如图片中，只拦截域名以”baidu.com”结束的域名，www.baidu.com、news.baidu.com以及zhidao.baidu.com都可以拦截到，但是不想看到的例如www.taobao.com就看不到了</p><p>3.Exclude</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCEaf03c2b6daaacb1bf0c63901ee4cd20e/981" alt=""></p><p>也许你只想拦截www.baidu.com、news.baidu.com以及别的<em>.baicu.com而不想看到zhidao.baidu.com呢？那就include \</em>.baidu.com，配置exclude zhidao.baidu.com吧</p><h4 id="Map-Remote"><a href="#Map-Remote" class="headerlink" title="Map Remote"></a>Map Remote</h4><p>开发过程中经常遇到需要把远端请求打到本地的情况。尤其是有了node之后，这种需求愈发明显</p><p>例如有以下情况</p><p>原始请求:<a href="http://news.baidu.com/tech/category1/widget?ajax=json&amp;id=ad" target="_blank" rel="noopener">http://news.baidu.com/tech/category1/widget?ajax=json&amp;id=ad</a><br>本地路径:localhost:8080/pages/widget?ajax=json&amp;id=ad</p><p>如果通用的匹配路径可归纳为将<a href="http://news.baidu.com/tech/category1/(abc" target="_blank" rel="noopener">http://news.baidu.com/tech/category1/(abc</a>) 匹配至 localhost:8080/pages/abc</p><p>那么可以如下配置：</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE72abf6622522bd0d92d141d1d97a0bc9/983" alt=""></p><h4 id="BreakPoints"><a href="#BreakPoints" class="headerlink" title="BreakPoints"></a>BreakPoints</h4><p>开发过程中还经常要模拟不同情况的返回值，在百度新闻刷新页面时，会调这么一个接口</p><p>Get: <a href="http://news.baidu.com/passport" target="_blank" rel="noopener">http://news.baidu.com/passport</a></p><p>下面介绍怎么修改它的请求值和返回值，因为这个接口无关紧要，只是在真正登录时返回了用户的用户名供页面展示，一般不会有安全的问题，所以可以直接拦截到，此处只是拿它举一个例子：如何修改请求及返回值。</p><p>用charles拦截到这个请求后，右键–&gt;BreakPoints<br><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE5936e72de2791e2a37dc25ef59b07286/985" alt=""></p><blockquote><p>注：此处右键之后有很多的功能待发掘，例如repeat会重复发送这个请求，或者此处有Map Remote可以直接进入界面设置要把这个路径匹配至哪里等等</p></blockquote><p>下次再刷新页面时，会出现如下界面<br><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE8c4e41076b9fb5f3b2048d14e238da7d/987" alt=""></p><p>有一个Edit Request，在这个界面可以增加或删除参数，或者直接双击name或者value进行编辑，修改完参数之后，点击Execute。有返回之后，会出现如下界面</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCEb949ddcbddd4708ce787568915c4a510/989" alt=""></p><p>界面中有edit Response，同样可以直接修改，修改完之后，点击Execute，请求就完成了，返回的结果可以直接供前端来使用。</p><p><img src="http://note.youdao.com/yws/public/resource/a9acf0b7cd75f096932b413d3307b10f/xmlnote/WEBRESOURCE7d1896954185fe07ac60e5a449c057b6/991" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境： Mac&lt;br&gt;Charles版本：v4.1.3&lt;/p&gt;
&lt;p&gt;charles是Mac上很好用的抓包工具。在需要跨页面的查看所有请求时，Chrome的network已经不能满足这个要求，此时使用charles再好不过了。另外还可以使用charles更改请求和返回数据、使请求打到不同的环境等。下面介绍几个常用的技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>JS原型与原型链</title>
    <link href="http://yoursite.com/2017/JS-prototype/"/>
    <id>http://yoursite.com/2017/JS-prototype/</id>
    <published>2017-10-30T08:56:56.000Z</published>
    <updated>2017-12-09T09:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题的引入"><a href="#问题的引入" class="headerlink" title="问题的引入"></a>问题的引入</h4><p>用控制台输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ var arr = [];</span><br><span class="line">$ arr.length // 0</span><br></pre></td></tr></table></figure><p>问题：为什么arr会有length属性？</p><a id="more"></a><h4 id="1-显示原型prototype"><a href="#1-显示原型prototype" class="headerlink" title="1. 显示原型prototype"></a>1. 显示原型prototype</h4><ul><li>JavaScript中每一个函数，都有一个prototype属性， 这个属性指向函数的原型对象</li></ul><h5 id="1-1-自定义函数的prototype"><a href="#1-1-自定义函数的prototype" class="headerlink" title="1.1 自定义函数的prototype"></a>1.1 自定义函数的prototype</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fn = function() &#123;&#125;</span><br><span class="line">console.log( fn.prototype );</span><br><span class="line">fn.prototype.constructor === fn;   // true</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2017/11/12/4af86fc38f20ab3e1096f05f7e0e0db9" alt=""></p><h5 id="1-2-内置构造器的prototype"><a href="#1-2-内置构造器的prototype" class="headerlink" title="1.2 内置构造器的prototype"></a>1.2 内置构造器的prototype</h5><p>Array是什么？<br>答：Array是一个函数</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/12/603bed777f274b1b84c6f4c8926b4339" alt=""></p><p>那么Array一定也有一个prototype属性了</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb4ff1bef7bc3e" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ Array.prototype.constructor // f Array()</span><br><span class="line">$ Array.prototype.constructor === Array // true</span><br><span class="line">$ Number.prototype.constructor === Number // true</span><br><span class="line">$ String.prototype.constructor === String // true</span><br><span class="line">$ Function.prototype.constructor === Function // true</span><br><span class="line">$ Object.prototype.constructor === Object // true</span><br></pre></td></tr></table></figure><h5 id="1-3-改变prototype"><a href="#1-3-改变prototype" class="headerlink" title="1.3 改变prototype"></a>1.3 改变prototype</h5><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb5618a38b850a" alt=""></p><p>结论：</p><ul><li>给prototype添加或者删除属性会影响所有已经或者未实例化的对象</li><li>重写prototype只会影响新new出来的对象</li></ul><h4 id="2-隐式原型-proto"><a href="#2-隐式原型-proto" class="headerlink" title="2. 隐式原型__proto__"></a>2. 隐式原型__proto__</h4><ul><li>JavaScript中任意对象都有一个内置属性<strong>proto</strong>， 指向创建这个对象的函数(constructor)的prototype</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br><span class="line">arr.__ptoto__ === Array.prototype // true</span><br></pre></td></tr></table></figure><p>根据”JavaScript中任意对象都有一个内置属性__proto__， 指向创建这个对象的函数(constructor)的prototype”，函数Array创建了对象arr，因此arr的__proto__指向Array.prototype。即</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb4feb2eb4e810" alt=""></p><ul><li>此处提一下Object.create(),Object.create接收两个参数，第一个参数用来作为新对象的隐式原型, 第二个参数是对象的属性描述符。因此<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;LEG_NUM:2 &#125;;</span><br><span class="line">var xiaoMing = Object.create(person);</span><br><span class="line">xiaoMing.__proto__ === person; // true</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-1-改变-proto"><a href="#2-1-改变-proto" class="headerlink" title="2.1 改变__proto__"></a>2.1 改变__proto__</h5><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb5628e12d0785" alt=""></p><p>结论</p><ul><li>改变arr.<strong>proto</strong>等价于改变Array.prototype</li></ul><h4 id="3-原型链"><a href="#3-原型链" class="headerlink" title="3. 原型链"></a>3. 原型链</h4><ul><li>当我们访问某个对象中的某个属性时，如果该对象本身具有这个属性，则直接使用，如果该对象本身没有这个属性，那么就会沿着__proto__依次查找</li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb5576c544462e" alt=""></p><p>上图中，访问obj.z的时候在obj中没有访问到，就会沿着__proto__向上查找，于是在foo.prototype中找到了返回3.</p><p>访问obj.hasOwnProperty()时，同样在obj中没有找到这个属性，沿着__proto__向上查找，直到在Object.prototype中找到这个属性。</p><h4 id="4-instanceof"><a href="#4-instanceof" class="headerlink" title="4. instanceof"></a>4. instanceof</h4><p>instanceof, 左边是一个对象，右边必须是一个函数或构造器。它会判断右边构造器的prototype属性是否出现在左边对象的原型链上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] instanceof Array // true</span><br><span class="line">[] instanceof Object // true</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb55bf5ff07694" alt=""></p><h4 id="5-原型链的优缺点"><a href="#5-原型链的优缺点" class="headerlink" title="5. 原型链的优缺点"></a>5. 原型链的优缺点</h4><ul><li>优点: 节省内存、方便维护</li><li>缺点: 更改原型将影响所有指向它的对象<br>以下是《Javascript高级程序设计》中使用到的例子</li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb55df5e74932a" alt=""></p><p>改变person1的friends，会同时改变person2的friends，因为它们共用一个prototype.这显然不是我们想要的。可以通过如下方法改进</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/13/15fb55f9e4dab238" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>显式原型的作用<br>用来实现基于原型的继承与属性的共享。</li><li>隐式原型的作用<br>构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问obj这个对象中的x属性时，如果在obj中找不到，那么就会沿着__proto__依次查找。</li><li>二者的关系<br>隐式原型指向创建这个对象的函数(constructor)的prototype</li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://www.zhihu.com/question/34183746" target="_blank" rel="noopener">https://www.zhihu.com/question/34183746</a></li><li><a href="https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173684" target="_blank" rel="noopener">https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173684</a></li><li>《Javascript高级程序设计》(第3版)第6章</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题的引入&quot;&gt;&lt;a href=&quot;#问题的引入&quot; class=&quot;headerlink&quot; title=&quot;问题的引入&quot;&gt;&lt;/a&gt;问题的引入&lt;/h4&gt;&lt;p&gt;用控制台输入如下命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ var arr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ arr.length // 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题：为什么arr会有length属性？&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建github博客</title>
    <link href="http://yoursite.com/2017/how-hexo/"/>
    <id>http://yoursite.com/2017/how-hexo/</id>
    <published>2017-10-30T03:06:24.000Z</published>
    <updated>2017-12-09T09:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>搭建环境:Mac</p><p>使用hexo的优点：可以使用Markdown编辑页面，各种各样的Markdown编辑器使用起来非常方便</p><a id="more"></a><h4 id="步骤一、创建github仓库"><a href="#步骤一、创建github仓库" class="headerlink" title="步骤一、创建github仓库"></a>步骤一、创建github仓库</h4><p>在github创建与用户名对应的仓库，如用户名为Lie8466，则需要创建的仓库为 Lie8466.github.io。</p><p><em>参考文档：<a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a> 中的步骤1<br> 注：如果已经创建过，请忽略此步。hexo部署完毕后会更改默认的index页面</em></p><h4 id="步骤二、安装hexo"><a href="#步骤二、安装hexo" class="headerlink" title="步骤二、安装hexo"></a>步骤二、安装hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>手动创建hexo文件夹,假如创建的目录为/Users/yaweili/Documents/hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd /Users/yaweili/Documents/hexo</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>Hexo Server已经启动了，在浏览器中打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，<br>你可以按Ctrl+C 停止Server。</p><p>打开新的命令行窗口(command+T)，创建新文章，”My New Post”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>执行下面的命令，将markdown文件生成静态网页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h5 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h5><p>在/Users/yaweili/Documents/hexo/source/_posts下可以看到My-New-Post.md文件，利用markdown编辑器编辑该文件</p><h5 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h5><p>在/Users/yaweili/Documents/hexo下找到文件_config.yml，用编辑器打开，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/Lie8466/Lie8466.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>安装hexo-deployer-git， 以及部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><em>参考文档 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a><br>部署参考 <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment.html</a> </em></p><h5 id="部署成功"><a href="#部署成功" class="headerlink" title="部署成功"></a>部署成功</h5><p>在浏览器中打开 Lie8466.github.io ，正常显示网页，表明部署成功。</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>修改/Users/yaweili/Documents/hexo/source/_posts下的.md文件，刷新localhost:4000可以看到实时的更新</p><p>部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generation // 或者hexo g</span><br><span class="line">$ hexo deploy // 或者hexo d</span><br></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>/Users/yaweili/Documents/hexo/_config.yml有很多可以自己配置的小功能点，理解每一个配置项的含义可以个性化定制自己的页面</p><h5 id="配置标题"><a href="#配置标题" class="headerlink" title="配置标题"></a>配置标题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Yawei Li // 配置网站首页的大标题，默认为hexo</span><br><span class="line">subtitle: knowing something of everything and everything of something // 配置网站首页的副标题，默认无</span><br><span class="line">description:</span><br><span class="line">author: Yawei Li</span><br><span class="line">language: zh</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><h5 id="配置页面路径"><a href="#配置页面路径" class="headerlink" title="配置页面路径"></a>配置页面路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:title/  // 配置页面的路径，默认为年/月/日/标题，会显示太长，可以自行删掉一些信息</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h5 id="配置分类及标签"><a href="#配置分类及标签" class="headerlink" title="配置分类及标签"></a>配置分类及标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: conclusion</span><br><span class="line">category_map: [&apos;学习笔记&apos;, &apos;总结&apos;, &apos;分享&apos;, &apos;其它&apos;]</span><br><span class="line">tag_map: [&apos;JS&apos;, &apos;Vue&apos;, &apos;前端性能&apos;, &apos;其它&apos;]</span><br></pre></td></tr></table></figure><p>上述配置的分类和标签可以在新建的.md文件中使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo搭建github博客</span><br><span class="line"></span><br><span class="line">date: 2017-10-30 11:06:24</span><br><span class="line"></span><br><span class="line">category: 总结</span><br><span class="line"></span><br><span class="line">tags: 其它</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>配置完成的分类和标签会在博客首页有相应的筛选项，可以快速查找某一个类型或者某个标签下的文章。</p><p>更多功能等待发现。。。</p><p><em><br>参考文档：<a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhcncn/p/4097881.html</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建环境:Mac&lt;/p&gt;
&lt;p&gt;使用hexo的优点：可以使用Markdown编辑页面，各种各样的Markdown编辑器使用起来非常方便&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
</feed>
